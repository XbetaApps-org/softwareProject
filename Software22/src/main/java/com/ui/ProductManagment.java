package com.ui;

import java.awt.event.ActionListener.*;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JTextField;

import com.software.models.Product;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author osaid
 */
public class ProductManagment extends javax.swing.JFrame {

    /**
     * Creates new form ProdutManagment
     */
    public ProductManagment() {
        initComponents();
    }
     private String message;
     private  List<Product> productList = new ArrayList<>();
     
     
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {
    	
    	Product a = new Product("1","a",5);
        productList.add(a);
        
         a = new Product("2","a",5);
        productList.add(a);
        
         a = new Product("3","a",5);
        productList.add(a);
        
         a = new Product("999","a",5);
        productList.add(a);
        
         a = new Product("1000","a",5);
        productList.add(a);
        
        setOperation(new javax.swing.JComboBox<>());
        submitB = new javax.swing.JButton();
        setPriceT(new javax.swing.JTextField());
        ProductIdT = new javax.swing.JTextField();
        setProductNT(new javax.swing.JTextField());
        productIdL = new javax.swing.JLabel();
        PriceL = new javax.swing.JLabel();
        productIdL2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        getOperation().setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {"delete","add","update" }));

        submitB.setText("Submit");
        submitB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitBActionPerformed(evt);
            }
        });

        getPriceT().setEditable(true);
        getPriceT().addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PriceTActionPerformed(evt);
            }
        });

        ProductIdT.setEditable(true);

        getProductNT().setEditable(true);

        productIdL.setText("Product Id");

        PriceL.setText("Price");

        productIdL2.setText("Product Name");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(129, 129, 129)
                .addComponent(productIdL, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(getProductNT())
                    .addComponent(getOperation(), javax.swing.GroupLayout.Alignment.TRAILING, 0, 102, Short.MAX_VALUE)
                    .addComponent(ProductIdT, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(91, 91, 91)
                        .addComponent(submitB))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(89, 89, 89)
                        .addComponent(PriceL, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(getPriceT(), javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(169, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(124, 124, 124)
                    .addComponent(productIdL2)
                    .addContainerGap(562, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(90, 90, 90)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(getPriceT(), javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ProductIdT, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(productIdL, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PriceL, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(82, 82, 82)
                .addComponent(getProductNT(), javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 82, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(getOperation(), javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(submitB))
                .addGap(96, 96, 96))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(208, 208, 208)
                    .addComponent(productIdL2, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(218, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>                        

    private void PriceTActionPerformed(java.awt.event.ActionEvent evt) {                                       
        // TODO add your handling code here:
    }                                      

    private void submitBActionPerformed(java.awt.event.ActionEvent evt) {                                        
    String  productId = ProductIdT.getText();
    String productName = getProductNT().getText();
    String priceText = getPriceT().getText();
    String actionType = (String) getOperation().getSelectedItem();
    
   
    
    // Basic validation for empty fields
    if (productId.isEmpty() || productName.isEmpty() || priceText.isEmpty()) {
        JOptionPane.showMessageDialog(this, "All fields must be filled", "Error", JOptionPane.ERROR_MESSAGE);
        message = "All fields must be filled";
        return;
    }

    // Parse the price and handle possible number format exception
    double price=0;
    
    if(priceText.startsWith("-"))
   	{
            JOptionPane.showMessageDialog(this, "Invalid price format", "Error", JOptionPane.ERROR_MESSAGE);
            message = "Invalid price format";
            return;
    }
    

    switch (actionType.toLowerCase()) {
    case "add":
        // Check if the product already exists
        if (productExists(productId)) {
            JOptionPane.showMessageDialog(this, "Product already exists", "Error", JOptionPane.ERROR_MESSAGE);
            message = "Product already exists";
        } else {
            addProduct(productId, productName, price);
        }
        break;

        case "update":
            editProduct(productId, productName, price);
            break;

        case "delete":
            deleteProduct(productId);
            break;

        default:
            JOptionPane.showMessageDialog(this, "Invalid action type", "Error", JOptionPane.ERROR_MESSAGE);
            message = "Invalid action type";
            break;
    }
    }   
    private boolean productExists(String productId) {
        System.out.println("Checking for product with ID: " + productId  ); // Debugging output
        for (Product p : productList) {
        	 System.out.println("Checking for product  ID: " + p.getProductId() );
            if (p.getProductId().equals(productId)) {
                System.out.println("Product found: " + p); // Debugging output
                return true;
            }
        }
        System.out.println("Product not found"); // Debugging output
        return false;
    }

    private void addProduct(String productId, String productName, double price) {
    boolean productExists = productList.stream()
        .anyMatch(product -> product.getProductId().equals(productId));

    
    if (productExists) {
        JOptionPane.showMessageDialog(this, "Product already exists", "Error", JOptionPane.ERROR_MESSAGE);
        message = "Product already exists";
    } else {
        Product newProduct = new Product(productId, productName, price);
        productList.add(newProduct);
        JOptionPane.showMessageDialog(this, "Product added successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
        message = "Product added successfully";
    }
}

// Method to edit a product
private void editProduct(String productId, String newProductName, double newPrice) {
    Product existingProduct = productList.stream()
        .filter(product -> product.getProductId().equals(productId))
        .findFirst()
        .orElse(null);

    if (existingProduct != null) {
        existingProduct.setProductName(newProductName);
        existingProduct.setPrice(newPrice);
        JOptionPane.showMessageDialog(this, "Product edited successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
        message = "Product edited successfully";
    } else {
        JOptionPane.showMessageDialog(this, "Product not found", "Error", JOptionPane.ERROR_MESSAGE);
        message = "Product not found";
    }
}

// Method to delete a product
private void deleteProduct(String productId) {
    Product existingProduct = productList.stream()
        .filter(product -> product.getProductId().equals(productId))
        .findFirst()
        .orElse(null);

    if (existingProduct != null) {
        productList.remove(productExists(productId));
        JOptionPane.showMessageDialog(this, "Product deleted successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
        message = "Product deleted successfully";
    } else {
        JOptionPane.showMessageDialog(this, "Product not found", "Error", JOptionPane.ERROR_MESSAGE);
        message = "Product not found";
    }
}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ProductManagment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ProductManagment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ProductManagment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ProductManagment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ProductManagment().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JComboBox<String> Operation;
    private javax.swing.JLabel PriceL;
    private javax.swing.JTextField PriceT;
    private javax.swing.JTextField ProductIdT;
    private javax.swing.JTextField ProductNT;
    private javax.swing.JLabel productIdL;
    private javax.swing.JLabel productIdL2;
    public javax.swing.JButton submitB;    
    // End of variables declaration     
    
    public void submit() {
		submitBActionPerformed(null);
	}

	public javax.swing.JTextField getPriceT() {
		return PriceT;
	}

	public void setPriceT(javax.swing.JTextField priceT) {
		PriceT = priceT;
	}
	public void setProductIdT(javax.swing.JTextField productId) {
		ProductIdT = productId;
	}

	public javax.swing.JTextField getProductIdT() {
		return ProductIdT;
	}
	public javax.swing.JTextField getProductNT() {
		return ProductNT;
	}

	public void setProductNT(javax.swing.JTextField productNT) {
		ProductNT = productNT;
	}

	public javax.swing.JComboBox<String> getOperation() {
		return Operation;
	}

	public void setOperation(javax.swing.JComboBox<String> operation) {
		Operation = operation;
	}
public String getMessage() {
		return this.message;
	}
}

